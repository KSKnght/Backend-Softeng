// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model client {
  id Int @id @default(autoincrement())
  firstname String @db.VarChar(40)
  lastname String @db.VarChar(40)
  middlename String @db.VarChar(40)
  emailAdd String @db.VarChar(40)
  contactNum String @db.VarChar(40)

  project project[]
}

model project {
  id Int @id @default(autoincrement())
  type String @db.VarChar(40)
  projectAddress String @db.VarChar(40)
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  clientID Int
  client client @relation(fields: [clientID], references: [id])

  phase phase[]
}

enum projectType {
  BUILD
  DESIGN_BUILD
  DESIGN
}

model phase {
  id Int @id @default(autoincrement())
  projectID Int
  priority Int
  phaseName String @db.VarChar(40)
  progress progessField

  project project @relation(fields: [projectID], references: [id])
  phaseTasks phaseTasks[]
}

enum progessField {
  COMPLETE
  NOT_STARTED
  IN_PROGRESS
}

model phaseTasks {
  id Int @id @default(autoincrement())
  taskName String @db.VarChar(100)
  description String @db.Text
  phaseID Int
  progress progessField
  deadline DateTime @db.Date

  phase phase @relation(fields: [phaseID], references: [id])
  taskSubcon taskSubcon[]
}

model subCon {
  id Int @id @default(autoincrement())
  Name String @db.VarChar(40)

  taskSubcon taskSubcon[]
}

model taskSubcon {
  id Int @id @default(autoincrement())
  subID Int
  phaseTaskId Int

  subCon subCon @relation(fields: [subID], references: [id])
  phaseTasks phaseTasks @relation(fields: [phaseTaskId], references: [id])
}

//materials
model supplier {
  id Int @id @default(autoincrement())
  supplierName String @db.VarChar(40) @unique

  materials materials[]
}

model materials {
  id Int @id @default(autoincrement())
  name String @db.VarChar(40)
  supplierName String

  supplier supplier @relation(fields: [supplierName], references: [supplierName])
}

// for overview of all materials in all tasks in one project
model projMat {
  id Int @id @default(autoincrement())
  projId Int
  matId Int
  totalQty Float
  unit unit
}

// for task specific materials
model taskMat {
  id Int @id @default(autoincrement())
  taskId Int
  matId Int
  qty Float
  unit unit
}

enum unit {
  KG
  PC
  INCH
  METER
}

// Inventory
// Inventory for any excess materials from finished projects

// Inventory outStock

// Inventory inStock



// quotations